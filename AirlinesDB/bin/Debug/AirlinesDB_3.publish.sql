/*
Deployment script for AirlinesDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AirlinesDB"
:setvar DefaultFilePrefix "AirlinesDB"
:setvar DefaultDataPath "C:\Users\Dhruv\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Dhruv\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Airline]...';


GO
CREATE TABLE [dbo].[Airline] (
    [AirlineId]   INT        NOT NULL,
    [AirlineName] NCHAR (10) NOT NULL,
    CONSTRAINT [PK_AIRLINE] PRIMARY KEY CLUSTERED ([AirlineId] ASC)
);


GO
PRINT N'Creating [dbo].[Airport]...';


GO
CREATE TABLE [dbo].[Airport] (
    [AirportId]   INT        NOT NULL,
    [AirportName] NCHAR (10) NOT NULL,
    CONSTRAINT [PK_AIRRPORT] PRIMARY KEY CLUSTERED ([AirportId] ASC)
);


GO
PRINT N'Creating [dbo].[Booking]...';


GO
CREATE TABLE [dbo].[Booking] (
    [BookingId]   INT   NOT NULL,
    [PassengerId] INT   NOT NULL,
    [BaggageFee]  MONEY NOT NULL,
    [ServiceFee]  MONEY NOT NULL,
    [TotalFee]    MONEY NOT NULL,
    [isRoundTrip] BIT   NOT NULL,
    CONSTRAINT [PK_BOOKING] PRIMARY KEY CLUSTERED ([BookingId] ASC, [PassengerId] ASC)
);


GO
PRINT N'Creating [dbo].[Flight]...';


GO
CREATE TABLE [dbo].[Flight] (
    [FlightId]           INT      NOT NULL,
    [AirlineId]          INT      NOT NULL,
    [DepartureAirport]   INT      NOT NULL,
    [DestinationAirport] INT      NOT NULL,
    [FlightDate]         DATETIME NOT NULL,
    [Price]              MONEY    NOT NULL,
    [NumSeats]           INT      NOT NULL,
    CONSTRAINT [PK_FLIGHT] PRIMARY KEY CLUSTERED ([FlightId] ASC)
);


GO
PRINT N'Creating [dbo].[FlightBooking]...';


GO
CREATE TABLE [dbo].[FlightBooking] (
    [BookingId]   INT NOT NULL,
    [PassengerId] INT NOT NULL,
    [FlightId]    INT NOT NULL,
    [SeatNum]     INT NOT NULL,
    CONSTRAINT [PK_FLIGHTBOOKING] PRIMARY KEY CLUSTERED ([BookingId] ASC, [FlightId] ASC, [SeatNum] ASC)
);


GO
PRINT N'Creating [dbo].[Passenger]...';


GO
CREATE TABLE [dbo].[Passenger] (
    [PassengerId] INT        NOT NULL,
    [FirstName]   NCHAR (10) NOT NULL,
    [LastName]    NCHAR (10) NOT NULL,
    [Gender]      NCHAR (10) NOT NULL,
    [Email]       NCHAR (10) NOT NULL,
    CONSTRAINT [PK_PERSON] PRIMARY KEY CLUSTERED ([PassengerId] ASC)
);


GO
PRINT N'Creating [dbo].[Seat]...';


GO
CREATE TABLE [dbo].[Seat] (
    [SeatNum]  INT NOT NULL,
    [FlightId] INT NOT NULL,
    [isBooked] INT NOT NULL,
    CONSTRAINT [PK_SEAT] PRIMARY KEY CLUSTERED ([SeatNum] ASC, [FlightId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_FLIGHTBOOKING_BID]...';


GO
ALTER TABLE [dbo].[FlightBooking]
    ADD CONSTRAINT [FK_FLIGHTBOOKING_BID] FOREIGN KEY ([BookingId], [PassengerId]) REFERENCES [dbo].[Booking] ([BookingId], [PassengerId]);


GO
PRINT N'Creating [dbo].[FK_FLIGHTBOOKING_FID]...';


GO
ALTER TABLE [dbo].[FlightBooking]
    ADD CONSTRAINT [FK_FLIGHTBOOKING_FID] FOREIGN KEY ([FlightId]) REFERENCES [dbo].[Flight] ([FlightId]);


GO
PRINT N'Creating [dbo].[FK_FLIGHTBOOKING_SNUM]...';


GO
ALTER TABLE [dbo].[FlightBooking]
    ADD CONSTRAINT [FK_FLIGHTBOOKING_SNUM] FOREIGN KEY ([SeatNum], [FlightId]) REFERENCES [dbo].[Seat] ([SeatNum], [FlightId]);


GO
PRINT N'Creating [dbo].[FK_SEAT]...';


GO
ALTER TABLE [dbo].[Seat]
    ADD CONSTRAINT [FK_SEAT] FOREIGN KEY ([FlightId]) REFERENCES [dbo].[Flight] ([FlightId]) ON DELETE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '66269772-4cba-4897-9dd1-b4691a4665b5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('66269772-4cba-4897-9dd1-b4691a4665b5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '85e7cf26-c6c0-4e7d-9c65-9a0651f4e04c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('85e7cf26-c6c0-4e7d-9c65-9a0651f4e04c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ef3c6a3b-f036-4d27-bfbc-f881d5eac1f4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ef3c6a3b-f036-4d27-bfbc-f881d5eac1f4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '992eafad-6929-401f-9276-73d0ba367ad0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('992eafad-6929-401f-9276-73d0ba367ad0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fc9e5e09-81b8-4725-bcd1-3ea656de3cfa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fc9e5e09-81b8-4725-bcd1-3ea656de3cfa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '66275ddb-7163-4e92-9933-331818985946')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('66275ddb-7163-4e92-9933-331818985946')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cde76b52-0007-498f-a49e-e6ed097cb06e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cde76b52-0007-498f-a49e-e6ed097cb06e')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
